# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

service:
  auth: false
  base-path: /v2
  endpoints:
    reporterReporterNotify:
      path: /notify
      method: POST
      display-name: Notify QuantumLeap the arrival of a new NGSI notification.
      request:
        headers:
          fiware-Service:
            docs: >-
              The corresponding 'fiware-service' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>
          fiware-ServicePath:
            docs: >-
              The corresponding 'fiware-servicepath' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>

    reporterReporterSubscribe:
      path: /subscribe
      method: POST
      docs: >-
        This endpoint simplifies the creation of the subscription in orion that
        will generate the notifications to be consumed by QuantumLeap in order
        to save historical records. If you want an advanced specification of the
        notifications, you can always create the subscription in orion at your
        will. This endpoint just aims to simplify the common use case.
      display-name: Subscribe QL to process Orion notifications of certain type.
      request:
        query-parameters:
          orionUrl:
            docs: >-
              The url where QuantumLeap can reach Orion. Do not include specific
              paths, just the base one including the api version. E.g
              http://my-orion.com:1026/v2
            type: string
          quantumleapUrl:
            docs: >-
              The url where Orion can reach QuantumLeap. Do not include specific
              paths, just the base one including the api version. E.g
              http://my-quantumleap.com:8668/v2
            type: string
          entityType:
            docs: >-
              The type of entities for which to create a subscription, so as to
              persist historical data of entities of this type. ATTENTION: If
              not specified, all entity types will be tracked.
            type: optional<string>
          entityId:
            docs: >-
              Id of the entity to track. If specified, it takes precedence over
              the idPattern parameter. If absent but an idPattern is given, then
              QL will use the idPattern to determine which entities to track. If
              no idPattern is given either, then QL will use the entityType if
              present. If not even an entityType is given, then QL will fall
              back to tracking all entities.
            type: optional<string>
          idPattern:
            docs: >-
              The pattern covering the entity ids for which to subscribe. If not
              specified, QL will track all entities of the specified type. This
              attribute is documented in orion, see
              https://fiware-orion.readthedocs.io/en/master/user/walkthrough_apiv2/index.html#subscriptions
            type: optional<string>
          attributes:
            docs: >-
              Comma-separated list of attribute names to track. These attributes
              are used to narrow the condition that triggers data change
              notifications---i.e. they will be used to fill the attrs field of
              the subject's condition of the Orion subscription QL creates. They
              will also be used to fill the attrs field of the notification
              object in the subscription QL creates. (Full details at:
              http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More
              specifically, call E the set of entities determined by the given
              combination of entityType, entityId and idPattern. Then we have a
              set A of all attributes of entities in E whose name is in
              attributes. When the value of any of the attributes in A changes,
              Orion will send QL the current values of those attributes. Note
              that when using this attributes parameter the set of attributes
              that Orion will track for changes (observed attributes) is the
              same as the set of attributes that determine which data Orion will
              put in notifications (notified attributes). If the two sets need
              to be different, use the observedAttributes and notifiedAttributes
              parameters below. (If you supply an attributes parameter,
              observedAttributes and notifiedAttributes will be ignored.)
            type: optional<string>
          observedAttributes:
            docs: >-
              Comma-separated list of attribute names to track. These attributes
              are used to narrow the condition that triggers data change
              notifications---i.e. they will be used to fill the attrs field of
              the subject's condition of the Orion subscription QL creates.
              (Full details at:
              http://telefonicaid.github.io/fiware-orion/api/v2/stable/) More
              specifically, call E the set of entities determined by the given
              combination of entityType, entityId and idPattern. Then we have a
              set A of all attributes of entities in E whose name is in
              observedAttributes. When the value of any of the attributes in A
              changes, Orion will send QL the current values of the attributes
              specified by the notifiedAttributes parameter. If
              observedAttributes is absent, QL will be notified of any changes
              to the entities in E.
            type: optional<string>
          notifiedAttributes:
            docs: >-
              Comma-separated list of attribute names to be used to restrict the
              data of which QL will keep a history. This list will be used to
              set the notification's attrs field of the subscription that QL
              creates. (Full details at:
              http://telefonicaid.github.io/fiware-orion/api/v2/stable/) If not
              specified, QL will keep a history of all data changes in any of
              the entities identified by the given combination of entityType,
              entityId and idPattern.
            type: optional<string>
          throttling:
            docs: >-
              Minimal period of time in seconds which must elapse between two
              consecutive notifications. This is the value QL will use for the
              throttling field when creating the subscription. If not specified,
              it defaults to 1.
            type: optional<integer>
          timeIndexAttribute:
            docs: >-
              The name of a custom attribute to be used as a time index. On
              receiving notifications containing this attribute, QL will use its
              value as a time series index for the entity being notified. If
              specified, it should refer to an entity attribute whose value is
              an ISO 8601 timestamp.
            type: optional<string>
        headers:
          fiware-Service:
            docs: >-
              The corresponding 'fiware-service' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>
          fiware-ServicePath:
            docs: >-
              The corresponding 'fiware-servicepath' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>

    reporterOpQuery:
      path: /op/query
      method: POST
      docs: >-
        Allows QL to act as context provider by returning the last value stored
        for the entities queried. At the time being, `idPattern` and
        `expression` are not implemented.
      display-name: QL as Context Provider API.
      request:
        headers:
          fiware-Service:
            docs: >-
              The corresponding 'fiware-service' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>
          fiware-ServicePath:
            docs: >-
              The corresponding 'fiware-servicepath' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>
      response: _InlinedType2

    reporterDeleteDeleteEntity:
      path: /entities/{entityId}
      method: DELETE
      docs: Given an entity (with type and id), delete all its historical records.
      display-name: Delete historical data of a certain entity.
      path-parameters:
        entityId:
          docs: >-
            The entity id in which the query is restricted on. If the id is
            unique among all entity types, this could be used to uniquely
            identify the entity instance. Otherwise, you will have to use the
            entityType attribute to resolve ambiguity.
          type: string
      request:
        query-parameters:
          type:
            docs: >-
              Comma-separated list of entity types whose data are to be included
              in the response. Use only one (no comma) when required. If used to
              resolve ambiguity for the given entityId, make sure the given
              entityId exists for this entityType.
            type: optional<string>
          fromDate:
            docs: >-
              Optional. The starting date and time (inclusive) from which the
              context information is queried. Must be in ISO8601 format (e.g.,
              2018-01-05T15:44:34)
            type: optional<string>
          toDate:
            docs: >-
              Optional. The final date and time (inclusive) from which the
              context information is queried. Must be in ISO8601 format (e.g.,
              2018-01-05T15:44:34)
            type: optional<string>
        headers:
          fiware-Service:
            docs: >-
              The corresponding 'fiware-service' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>
          fiware-ServicePath:
            docs: >-
              The corresponding 'fiware-servicepath' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>

    reporterDeleteDeleteEntities:
      path: /types/{entityType}
      method: DELETE
      docs: >-
        Given an entity type, delete all the historical records of all entities
        of such type.
      display-name: Delete historical data of all entities of a certain type.
      path-parameters:
        entityType:
          docs: >-
            The entity type in which the query is restricted on. Used to
            constraint the search to entities of this type, specially useful
            when the entity id is not enough to uniquely identify an entity.
          type: string
      request:
        query-parameters:
          fromDate:
            docs: >-
              Optional. The starting date and time (inclusive) from which the
              context information is queried. Must be in ISO8601 format (e.g.,
              2018-01-05T15:44:34)
            type: optional<string>
          toDate:
            docs: >-
              Optional. The final date and time (inclusive) from which the
              context information is queried. Must be in ISO8601 format (e.g.,
              2018-01-05T15:44:34)
            type: optional<string>
          dropTable:
            docs: >-
              Optional. Drop the table storing an entity type. When deleting by
              entity type, setting this parameter to true will result in all
              entity data for the given type being deleted, the entity table
              will be dropped and the corresponding entry removed from the
              metadata table. This option should only be used for maintenance
              after the devices whose data is written to the table are
              decommissioned and no further writes are possible. In fact, race
              conditions are possible if entities of that type are POSTed to the
              notify endpoint while the underlying clean-up procedure is in
              progress.
            type: optional<boolean>
        headers:
          fiware-Service:
            docs: >-
              The corresponding 'fiware-service' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>
          fiware-ServicePath:
            docs: >-
              The corresponding 'fiware-servicepath' header. See
              http://fiware-orion.readthedocs.io/en/latest/user/multitenancy/index.html#multi-tenancy
            type: optional<string>

types:
  _InlinedType2:
    properties:
      entityId: optional<string>
      entityType: optional<string>
      attrName: optional<string>
